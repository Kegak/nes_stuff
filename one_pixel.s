;
; File generated by cc65 v 2.19 - Git b993d88
;
	.fopt		compiler,"cc65 v 2.19 - Git b993d88"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_abs
	.export		_drawPixel
	.export		_drawLine
	.export		_main

; ---------------------------------------------------------------
; void __near__ drawPixel (unsigned char x, unsigned char y, unsigned char color)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawPixel: near

.segment	"CODE"

;
; void drawPixel(uint8_t x, uint8_t y, uint8_t color) {
;
	jsr     pusha
;
; uint16_t vramAddress = y * 32 + x; // Each row occupies 32 bytes
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     tmp1
	bcc     L0002
	inx
L0002:	jsr     pushax
;
; PPUADDR = vramAddress >> 8; // High byte
;
	ldy     #$01
	lda     (sp),y
	sta     $2006
;
; PPUADDR = vramAddress & 0xFF; // Low byte
;
	dey
	lda     (sp),y
	sta     $2006
;
; PPUDATA = color;
;
	ldy     #$02
	lda     (sp),y
	sta     $2007
;
; }
;
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ drawLine (unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, unsigned char color)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawLine: near

.segment	"CODE"

;
; void drawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
;
	jsr     pusha
;
; int16_t dx = abs(x1 - x0);
;
	ldy     #$02
	lda     (sp),y
	sec
	ldy     #$04
	sbc     (sp),y
	ldx     #$00
	bcs     L000D
	dex
L000D:	jsr     _abs
	jsr     pushax
;
; int16_t dy = abs(y1 - y0);
;
	ldy     #$03
	lda     (sp),y
	sec
	ldy     #$05
	sbc     (sp),y
	ldx     #$00
	bcs     L000E
	dex
L000E:	jsr     _abs
	jsr     pushax
;
; int16_t sx = x0 < x1 ? 1 : -1;
;
	ldy     #$08
	lda     (sp),y
	ldy     #$06
	cmp     (sp),y
	bcs     L0002
	ldx     #$00
	lda     #$01
	jmp     L0003
L0002:	ldx     #$FF
	txa
L0003:	jsr     pushax
;
; int16_t sy = y0 < y1 ? 1 : -1;
;
	ldy     #$09
	lda     (sp),y
	ldy     #$07
	cmp     (sp),y
	bcs     L0004
	ldx     #$00
	lda     #$01
	jmp     L0005
L0004:	ldx     #$FF
	txa
L0005:	jsr     pushax
;
; int16_t err = dx - dy;
;
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$04
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
;
; int16_t x = x0;
;
	ldy     #$0E
	lda     (sp),y
	jsr     pusha0
;
; int16_t y = y0;
;
	ldy     #$0F
	lda     (sp),y
	jsr     pusha0
;
; while (x != x1 || y != y1) {
;
	jsr     decsp2
	jmp     L000C
;
; drawPixel(x, y, color);
;
L0006:	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldy     #$12
	lda     (sp),y
	jsr     _drawPixel
;
; e2 = (2 * err);
;
	ldy     #$07
	lda     (sp),y
	sta     tmp1
	dey
	lda     (sp),y
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     stax0sp
;
; if (e2 > -dy) {
;
	jsr     pushax
	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jsr     tosicmp
	bmi     L000B
	beq     L000B
;
; err -= dy;
;
	ldy     #$0D
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$06
	jsr     subeqysp
;
; x += sx;
;
	ldy     #$0A
	lda     (sp),y
	ldy     #$04
	clc
	adc     (sp),y
	sta     (sp),y
	ldy     #$0B
	lda     (sp),y
	ldy     #$05
	adc     (sp),y
	sta     (sp),y
;
; if (e2 < dx) {
;
L000B:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$0E
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L000F
	eor     #$80
L000F:	bpl     L000C
;
; err += dx;
;
	dey
	lda     (sp),y
	ldy     #$06
	clc
	adc     (sp),y
	sta     (sp),y
	ldy     #$0F
	lda     (sp),y
	ldy     #$07
	adc     (sp),y
	sta     (sp),y
;
; y += sy;
;
	iny
	lda     (sp),y
	ldy     #$02
	clc
	adc     (sp),y
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	ldy     #$03
	adc     (sp),y
	sta     (sp),y
;
; while (x != x1 || y != y1) {
;
L000C:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$12
	cmp     (sp),y
	jne     L0006
	txa
	jne     L0006
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$11
	cmp     (sp),y
	jne     L0006
	txa
	jne     L0006
;
; drawPixel(x1, y1, color);
;
	jsr     decsp2
	ldy     #$14
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$13
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldy     #$12
	lda     (sp),y
	jsr     _drawPixel
;
; }
;
	ldy     #$15
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; PPUCTRL = 0; // Disable NMI
;
	lda     #$00
	sta     $2000
;
; PPUMASK = 0xFF; // Show sprites, background
;
	lda     #$FF
	sta     $2001
;
; drawLine(10, 10, 20, 20, 0);
;
	jsr     decsp4
	lda     #$0A
	ldy     #$03
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	tya
	jsr     _drawLine
;
; while (1){
;
L0005:	jmp     L0005

.endproc

